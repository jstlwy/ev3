'Actual maze raw RGB ranges:
'(197, 200, 147) < White < (284, 282, 210)
'(223, 213, 46)< Yellow < (272, 249, 54)
'(214, 45, 26)< Red < (231, 56, 33)
'(83, 157, 42)< Green < (96, 173, 48)
'(37, 55, 69) < Blue < (39, 60, 72)

'Initialize program variables
MATH_E = 2.71828182846
targetSpeed = 30
targetAngle = 0
turnAngle = 90
Kturn = 0.04
yellowCount = 0
currentColor = "N"
previousColor = "N"

'Initialize sensors
gyroPort = 1
Sensor.SetMode(gyroPort, 1)
Sensor.SetMode(gyroPort, 0)
lightPort = 4
Sensor.SetMode(lightPort, 4)  'Mode 4 = RGB

'MAIN DRIVE LOOP
While yellowCount < 6
  currentAngle = Sensor.ReadRawValue(gyroPort, 0)
  
  'Find color currently beneath sensor and adjust movement
  DetermineColor()
  If currentColor = "W" Then
    If previousColor = "R" Then
      'If red, turn right (+90 deg)
      Program.Delay(500)
      targetAngle = targetAngle + turnAngle
    ElseIf previousColor = "G" Then
      'If green, turn left (-90 deg)
      Program.Delay(500)
      targetAngle = targetAngle - turnAngle
    ElseIf previousColor = "Y" Then
      yellowCount = yellowCount + 1
      If yellowCount = 3 Then
        Program.Delay(1200)
        targetAngle = targetAngle - turnAngle
      EndIf
    EndIf
  EndIf
  
  AdjustPath()
  previousColor = currentColor
  'DisplayValues()
EndWhile 

Sub DetermineColor
  currentRGB = Sensor.ReadRaw(lightPort, 3)
  percentColor[0] = Math.Round(currentRGB[0]/2.84)
  percentColor[1] = Math.Round(currentRGB[1]/2.82)
  percentColor[2] = Math.Round(currentRGB[2]/2.10)
  If percentColor[0] > 65 And percentColor[0] < 100 And percentColor[1] < 30 And percentColor[2] < 35 Then
    currentColor = "R"
  ElseIf percentColor[0] > 25 And percentColor[0] < 35 And percentColor[1] > 55 And percentColor[1] < 75 And percentColor[2] > 15 And percentColor[2] < 25 Then
    currentColor = "G"
  ElseIf percentColor[0] < 20 And percentColor[1] > 15 And percentColor[1] < 25 And percentColor[2] > 30 Then
    currentColor = "B"
  ElseIf percentColor[0] > 75 And percentColor[1] > 70 And percentColor[1] < 90 And percentColor[2] < 30 Then
    currentColor = "Y"
  ElseIf percentColor[0] > 75 And percentColor[1] > 75 And percentColor[2] > 75 Then
    currentColor = "W"
  EndIf
EndSub

Sub AdjustPath
  If currentAngle <> targetAngle Then
    correction = Kturn * (currentAngle - targetAngle)
    insideWheelSpeed = targetSpeed * Math.Power(MATH_E, -1 * Math.Abs(correction))
    If correction > 0 Then
      Motor.StartSync("BC", insideWheelSpeed, targetSpeed)
    Else
      Motor.StartSync("BC", targetSpeed, insideWheelSpeed)
    EndIf
  Else
    Motor.Start("BC", targetSpeed)
  EndIf
EndSub

Sub DisplayValues
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1, 0, 0, 1, "Current Angle: " + currentAngle)
  LCD.Text(1, 0, 20, 1, "Target Angle: " + targetAngle)
  LCD.Text(1, 0, 40, 1, "Kturn: " + Kturn)
  LCD.Text(1, 0, 60, 1, "RGB%: " + percentColor[0] + ", " + percentColor[1] + ", " + percentColor[2])
  LCD.Text(1, 0, 80, 1, "Current Color: " + currentColor)
  LCD.Text(1, 0, 100, 1, "Yellow Count: " + yellowCount)
  LCD.Update()
EndSub

Sub GetKturn
  adjustment = 0.001
  enterWasPushed = "False"
  While enterWasPushed = "False" 
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Text(1, 0, 0, 2, "Kturn:")
    LCD.Text(1, 0, 30, 2, Kturn)
    LCD.Update()
    
    buttonPressed = Buttons.GetClicks()
    If Text.IsSubText(buttonPressed, "E") Then
      enterWasPushed = "True"
    ElseIf Text.IsSubText(buttonPressed, "L") Then
      If Kturn > 0.01 Then
        Kturn = Kturn - adjustment
      EndIf
    ElseIf Text.IsSubText(buttonPressed, "R") Then
      If Kturn < 0.05 Then
        Kturn = Kturn + adjustment
      EndIf
    EndIf
  EndWhile
  
  Program.Delay(3000)
EndSub