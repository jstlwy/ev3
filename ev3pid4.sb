MATH_E = 2.71828182846
targetPower = 30
gyroPort = 1
lightPort = 4
Sensor.SetMode(gyroPort, 0)
Sensor.SetMode(lightPort, 0)     'Mode 0 = RLI

'Ask user for target RLI value
targetRLI = 0 
targetRLIWasSet = "False"
While targetRLIWasSet = "False"
  testRLIResult = Sensor.ReadPercent(lightPort)
  
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1, 0, 0, 2, "RLI:")
  LCD.Text(1, 0, 30, 2, testRLIResult)
  LCD.Update()
  
  buttonPressed = Buttons.GetClicks()
  If Text.IsSubText(buttonPressed, "E") Then
    targetRLI = testRLIResult
    targetRLIWasSet = "True"
  EndIf
  'Program.Delay(100)
EndWhile

LCD.Clear()

enterWasPushed = "False"
While enterWasPushed = "False" 
  buttonPressed = Buttons.GetClicks()
  If Text.IsSubText(buttonPressed, "E") Then
    enterWasPushed = "True"
  EndIf
EndWhile

Motor.Move("BC", targetPower, 500, "False")

'Initialize PID drive loop variables
endWasFound = "False"
integral = 0
derivative = 0
lastError = 0
Kp = 0.05
Ki = 0.0005
Kd = 0.10

'MAIN DRIVE LOOP
While endWasFound = "False"
  currentAngle = Sensor.ReadRawValue(gyroPort, 0)
  If currentAngle < -360 Then
    endWasFound = "True"
  EndIf
  
  measuredRLI = Sensor.ReadPercent(lightPort)
  
  'Determine error and turn values
  error = measuredRLI - targetRLI
  integral = integral + error
  derivative = error - lastError
  correction = (Kp * error) + (Ki * integral) + (Kd * derivative)
  lastError = error
  
  Drive()
  ShowValues()
EndWhile

Motor.Stop("BC", "True")

Sub Drive
  If correction = 0 Then
    Motor.Start("BC", targetPower)
  Else
    If correction < 0 Then
      'RLI < Target RLI, so slow left wheel, reverse right
      powerB = targetPower * Math.Power(MATH_E, correction)
      powerC = targetPower * Math.Cos(Math.Pi * (1 - Math.Power(MATH_E, correction)))
    Else
      'RLI > Target RLI, so reverse left wheel, slow right
      powerB = targetPower * Math.Cos(Math.Pi * (1 - Math.Power(MATH_E, -1 * correction)))
      powerC = targetPower * Math.Power(MATH_E, -1 * correction)
    EndIf
    Motor.StartSync("BC", powerB, powerC)
  EndIf
EndSub

Sub ShowValues
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1,0,0,1, "Target RLI: " + targetRLI)
  LCD.Text(1,0,10,1, "Measured RLI: " + measuredRLI)
  LCD.Text(1,0,20,1, "Error: " + error)
  LCD.Text(1,0,30,1, "Integral: " + integral)
  LCD.Text(1,0,40,1, "Derivative: " + derivative)
  LCD.Text(1,0,50,1, "Correction: " + correction)
  LCD.Text(1,0,60,1, "Angle: " + currentAngle)
  LCD.Update()
EndSub